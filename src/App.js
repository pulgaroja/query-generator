import React, { useState } from 'react'
import {
	Button,
	Grid,
	Input,
	Menu,
	MenuItem,
	makeStyles,
} from '@material-ui/core'
import './styles.css'

/**
 * Using Material UI makeStyles to create custom classes
 */
const useStyles = makeStyles({
	filterInput: {
		alignSelf: 'center',
	},
	pill: {
		backgroundColor: '#D1F6F6',
		color: '#43425D',
		margin: 0,
		marginRight: 10,
		padding: 10,
		borderRadius: 4,
		alignSelf: 'center',
	},
})

/**
 * The list of filters offerred to generate the query
 */
const filterOptions = [
	'address',
	'emails',
	'name',
	'city',
	'country',
	'dateAdded',
	'dateUpdated',
]

/**
 * Functional React Component which allows for custom creation
 * of string Query paramaters for a GET call
 */
const App = () => {
	// Functional State
	const [filters, setFilters] = useState([])
	const [query, setQuery] = useState()
	const [menuAnchor, setMenuAnchor] = useState()
	const [selectedFilters, setSelectedFilters] = useState([])
	const [showFilterInput, setShowFilterInput] = useState(false)
	const [showMenu, setShowMenu] = useState(false)

	// Custom Classes generated by Material UI
	const classes = useStyles()

	/**
	 * Function that toggles the showMenu state property to show
	 * or hide the Filter Menu
	 * @param {Event} event the onclick event object from which we
	 * destructure the currentTarget property
	 */
	const toggleMenu = ({ currentTarget }) => {
		// set the Material UI Menu component requires an anchor element
		setMenuAnchor(currentTarget)
		// ensure the filter input is hidden
		setShowFilterInput(false)
		// toggle the showMenu boolean flag
		setShowMenu(!showMenu)
	}

	/**
	 * Function that handles the selection of a Filter Option
	 * @param {Event} event onchange event trigger
	 * @param {Number} filterIndex the filters index corresponding to
	 * the selected option
	 */
	const handleSelectFilterOption = (event, filterIndex) => {
		event.preventDefault()
		setSelectedFilters([...selectedFilters, filterIndex])
		setShowMenu(false)
		setShowFilterInput(true)
	}

	/**
	 * Function that checks if the Enter Key is hit by the user, if
	 * so it exits (blurs) the Input
	 * @param {Event} event object fired by onKeyDown() from which
	 * we destructure the key value and grab the target object
	 */
	const handleKeyPress = ({ key, target }) => {
		if (key === 'Enter') {
			target.blur()
		}
	}

	/**
	 * Function that grabs the query value for the selected filter,
	 * triggered when the Input is blurred (exited)
	 * @param {Event} event object fired by onBlur()
	 */
	const handleQueryInput = ({ target: { value } }) => {
		// first we hide the Filter Input
		setShowFilterInput(false)

		// grab the selected filter value
		const filter = filterOptions[selectedFilters[selectedFilters.length - 1]]

		// if query is null this is the first value start with ?
		if (!query) {
			setQuery(`?${filter}=${value}`)
		} else {
			// else we add the next item with &
			setQuery(query + `&${filter}=${value}`)
		}

		// now let's save the filter so we can display them
		setFilters([...filters, { filter, value }])
	}

	/**
	 * Function that handles onClick for the Search button
	 */
	const handleSearch = () => {
		// For now we're only printing the query string generated
		console.log(query)
	}

	return (
		<div className="App">
			<h1>Query Generator</h1>
			<Grid container>
				<Grid item sm={9} style={{ display: 'flex' }}>
					{/* As filters are added, show them as pills */}
					{filters.map(({ filter, value }, index) => (
						<div key={index} className={classes.pill}>
							{filter}:{value}
						</div>
					))}
					{/* The Add Filter button, hide while the user is setting a new filter */}
					{!showFilterInput && (
						<Button onClick={toggleMenu}>+ Add Filter</Button>
					)}
					{/* The filters Menu */}
					<Menu anchorEl={menuAnchor} open={showMenu}>
						{filterOptions.map((option, i) => (
							<MenuItem
								key={option}
								disabled={selectedFilters.includes(i)}
								onClick={e => handleSelectFilterOption(e, i)}
							>
								{option}
							</MenuItem>
						))}
					</Menu>
					{/* The Filter input which allows the user to set the filter value */}
					{showFilterInput && (
						<div className={classes.filterInput}>
							{filterOptions[selectedFilters[selectedFilters.length - 1]]}:{' '}
							<Input
								type="text"
								onKeyDown={handleKeyPress}
								onBlur={handleQueryInput}
							/>
						</div>
					)}
				</Grid>
				<Grid item sm={3}>
					<Button
						variant="contained"
						color="primary"
						style={{ float: 'right' }}
						onClick={handleSearch}
					>
						Search
					</Button>
				</Grid>
			</Grid>
		</div>
	)
}

export default App
